Dishes = new Mongo.Collection('dishes');
Orders = new Mongo.Collection('orders');
if (Meteor.isClient) {
    Meteor.subscribe('dishesList');
    Meteor.subscribe('ordersList');
    Template.registerHelper('activeBar', function(barName) {
        return Session.get('activeBar') == barName;
    });
    Template.registerHelper('thisId', function() {
        return this._id;
    });
    Template.registerHelper('price', function() {
        return (this.price / 100).toFixed(2);
    });
    Template.body.helpers({
        'bar': [{name: "Menu"}, {name: "Order"}, {name: "Cooking"}],
        'active': function() {
            if (Session.get('activeBar') == this.name) return "active";
        },
    });
    Template.body.events({
        'click .menuBar': function(event) {
            Session.set('activeBar', event.target.innerHTML);
        },
        'focus input': function(event) {
            event.target.select();
        }
    });
    Template.menu.helpers({
        'dish': function() {
            return Dishes.find();
        }
    });
    Template.menu.events({
        'submit #numberCallForm': function(event) {
            event.preventDefault();
        },
        'change .numberCall': function(event) {
            if (event.target.value == "") return;
            moneyObj = document.getElementById("money" + this._id);
            totalObj = document.getElementById("total");
            oldMoney = parseInt(moneyObj.innerHTML * 100);
            newMoney = parseInt(event.target.value) * this.price;
            moneyObj.innerHTML = (newMoney / 100).toFixed(2);
            totalObj.innerHTML = ((parseInt(totalObj.innerHTML * 100) + newMoney - oldMoney) / 100).toFixed(2);
        },
        'click #deleteDish': function() {
            if (confirm("Are you want to delete this dish?")) {
                Meteor.call('removeDish', this._id);
            }
        },
        'dblclick .name': function(event) {
            if (Session.get('activeBar') != "Menu") return;
            event.target.style.display = "none";
            nameChange = document.getElementById("nameChange" + this._id);
            nameChange.type = "text";
            nameChange.focus();
        },
        'dblclick .price': function(event) {
            if (Session.get('activeBar') != "Menu") return;
            event.target.style.display = "none";
            document.getElementById("form" + this._id).style.display = "inline";    
            priceChange = document.getElementById("priceChange" + this._id);
            priceChange.focus();
            priceChange.select();
        },
        'click #submitOrder': function(event) {
            total = document.getElementById("total");
            if (total.innerHTML == 0) {
                alert("Please choose something before Order!");
                return;
            }
            if (!confirm("Are you sure?")) return;
            var orderdishes = [];
            dishes = Dishes.find().fetch();
            for (var i = 0; i < dishes.length; i++) {
                number = document.getElementById("number" + dishes[i]._id);
                money = document.getElementById("money" + dishes[i]._id);
                if (parseInt(number.value) > 0) {
                    orderdishes.push({number: parseInt(number.value), money: money.innerHTML, name: dishes[i].name});
                }
                number.value = 0;
                money.innerHTML = 0;
            }
            Meteor.call('insertOrder', orderdishes, total.innerHTML);
            total.innerHTML = 0;
        }
    });
    Template.addDish.events({
        'submit form': function(event) {
            event.preventDefault();
            if (event.target.dishName.value == "") {
                alert("Please fill in the Name field!");
                return;
            }
            if (event.target.dishPrice.value == "") {
                alert("Please fill in the Price field!");
                return;
            }
            Meteor.call('insertDish', event.target.dishName.value, parseInt(event.target.dishPrice.value * 100));
            event.target.dishName.value = "";
            event.target.dishPrice.value = null;
        }
    });
    Template.nameChangeTemplate.events({
        'submit form': function(event) {
            event.preventDefault();
            event.target.nameChange.type = "hidden";
            if (event.target.nameChange.value == "") return;
            Meteor.call('updateDish', this._id, event.target.nameChange.value, this.price);
            document.getElementById("name" + this._id).style.display = "inline";
        },
        'blur .nameChange': function(event) {
            event.target.type = "hidden";   
            event.target.value = this.name;
            document.getElementById("name" + this._id).style.display = "inline";
        },
        'keyup .nameChange': function(event) {
            if (event.keyCode == 27) event.target.blur();
        }
    });
    Template.priceChangeTemplate.events({
        'submit form': function(event) {
            event.preventDefault();
            event.target.style.display = "";
            Meteor.call('updateDish', this._id, this.name, parseInt(event.target.priceChange.value * 100));
            document.getElementById("price" + this._id).style.display = "inline";
        },
        'blur .priceChange': function(event) {
            document.getElementById("form" + this._id).style.display = "";   
            event.target.value = this.price / 100;
            document.getElementById("price" + this._id).style.display = "inline";
        },
        'keyup .priceChange': function(event) {
            if (event.keyCode == 27) event.target.blur();
        }
    });
    Template.ordersList.helpers({
        'order': function() {
            return Orders.find();
        },
    });
    Template.ordersList.events({
        'click #deleteOrder': function() {
            Meteor.call('removeOrder', this._id);
        }
    });
    Accounts.ui.config({
        passwordSignupFields: 'USERNAME_ONLY'
    });
}
        
if (Meteor.isServer) {
    Meteor.methods({
        'insertDish': function(name, price) {
            if (!Meteor.userId()) throw "must-be-log-in";
            Dishes.insert({
                name: name,
                price: price,
                createBy: Meteor.userId(),
            });
        },
        'removeDish': function(dishId) {
            Dishes.remove(dishId);
        },
        'updateDish': function(dishId, name, price) {
            Dishes.update(dishId, {$set: {name: name, price: price}});
        },
        'insertOrder': function(dishes, totalAmount) {
            if (!Meteor.userId()) throw "must-be-log-in";
            Orders.insert({
                createBy: Meteor.userId(),
                dishes: dishes,
                totalAmount: totalAmount
            });
        },
        'removeOrder': function(orderId) {
            Orders.remove(orderId);
        }
    });
    Meteor.publish('dishesList', function() {
        return Dishes.find({createBy: this.userId});
    });
    Meteor.publish('ordersList', function() {
        return Orders.find({createBy: this.userId});
    });
}
